//   import { defineEventHandler, readBody } from 'h3';

import { readBody } from "h3";

//   import axios from 'axios';

const TELEGRAM_TOKEN = '–≤–∞—à_—Ç–æ–∫–µ–Ω_–±–æ—Ç–∞'; // –¢–µ–ª–µ–≥—Ä–∞–º —Ç–æ–∫–µ–Ω
const CHAT_ID = '–≤–∞—à_chat_id'; // –í–∞—à Chat ID
const SECRET_KEY = '–≤–∞—à_—Å–µ–∫—Ä–µ—Ç–Ω—ã–π_–∫–ª—é—á_–∏–∑_—é–∫–∞—Å—Å—ã'; // –°–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á –∏–∑ –ÆKassa


let crypto;
try {
  crypto = require('node:crypto');
} catch (err) {
  console.error('crypto support is disabled!');
} 



export default defineEventHandler(async (event) => {

const body = await readBody(event) 
const { event: eventType, object } = body; 
if (eventType === 'payment.succeeded') {
                  const { id, amount, metadata } = object;
console.log('id ->', id, 'amount -->', amount, 'metadata ->>>', metadata)
}

//       try {
//           // –ß–∏—Ç–∞–µ–º —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞
//           const body = await readBody(event);
  
//           // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
//           const signature = event.req.headers['authorization'];
//           if (!validateSignature(body, signature, SECRET_KEY)) {
//               return {
//                   status: 403,
//                   message: 'Invalid signature',
//               };
//           }
  
//           // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏—è –∏–∑ –ÆKassa
//           const { event: eventType, object } = body;
  
//           if (eventType === 'payment.succeeded') {
//               const { id, amount, metadata } = object;
  
//               // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –¢–µ–ª–µ–≥—Ä–∞–º–∞
//               const message = `
//               ‚úÖ –£—Å–ø–µ—à–Ω—ã–π –ø–ª–∞—Ç–µ–∂!
//               üí∞ –°—É–º–º–∞: ${amount.value} ${amount.currency}
//               üë§ User ID: ${metadata.user_id || 'N/A'}
//               üîë –ü–ª–∞—Ç–µ–∂ ID: ${id}`;
  
//               // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –¢–µ–ª–µ–≥—Ä–∞–º
//               await axios.post(`https://api.telegram.org/bot${TELEGRAM_TOKEN}/sendMessage`, {
//                   chat_id: CHAT_ID,
//                   text: message,
//               });
  
//               return { status: 200, message: 'Notification processed successfully' };
//           }
  
//           return { status: 400, message: 'Unhandled event' };
//       } catch (error) {
//           console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', error);
//           return {
//               status: 500,
//               message: 'Internal Server Error',
//           };
//       }
  })
  
  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
   * @param {object} body - —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞
   * @param {string} signature - –∑–∞–≥–æ–ª–æ–≤–æ–∫ Authorization
   * @param {string} secret - —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á
   * @returns {boolean}
   */
  function validateSignature(body, signature, secret) {
      const payload = JSON.stringify(body);
      const hash = crypto.createHmac('sha256', secret).update(payload).digest('base64');
      return signature === `Bearer ${hash}`;
  }
  